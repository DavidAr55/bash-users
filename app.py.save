from ssl import SSLContext
from flask import Flask, render_template, request, redirect, url_for, flash, session, send_file, jsonify
from flask_mysqldb import MySQL
from datetime import datetime
from ansi2html import Ansi2HTMLConverter
import pytz
import logging
import subprocess
import re
import os

app = Flask(__name__)

# Settings
app.secret_key = 'mysecretkey'
tz = pytz.timezone('America/Mexico_City')

# Configuración del logger
logging.basicConfig(filename='app.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logging.Formatter.converter = lambda *args: datetime.now(tz).timetuple()

# MySql Connection
app.config['MYSQL_HOST']     = 'localhost'
app.config['MYSQL_USER']     = 'flask'
app.config['MYSQL_PASSWORD'] = 'flaskServer2024'
app.config['MYSQL_DB']       = 'bash_users'
mysql = MySQL(app)


@app.route('/')
def root():
    return redirect(url_for('login'))

@app.route('/login')
def login():
    return render_template('login.html')

@app.route('/verify_login', methods=['POST'])
def verify_login():
    if request.method == 'POST':
        # Log de solicitud de inicio de sesión
        logging.info('Intento de inicio de sesión de usuario: %s', request.form['user_name'])

        user_name = request.form['user_name']
        root_id   = 1
        # user_password = request.form['user_password']

        cur = mysql.connection.cursor()
        cur.execute('SELECT * FROM users WHERE user_name = %s AND id = %s', (user_name, root_id))
        my_user = cur.fetchone()
        cur.close()

        if my_user:
            # Cambiar de usuario utilizando el comando 'su'
            try:
                result = subprocess.run(['su', user_name], capture_output=True, text=True, input='\n', timeout=5)
                if result.returncode == 0:
                    session['user_name']  = my_user[1]
                    session['user_group'] = my_user[3]
                    logging.info('Inicio de sesión del usuario "%s" completado de manera exitosa', request.form['user_name'])
                    flash('¡Inicio de sesión exitoso!', 'success')
                    return redirect(url_for('Index'))
                else:
                    # Capturar el mensaje de error y mostrarlo
                    error_message = result.stderr.strip()
                    logging.warning('Inicio de sesión fallido de: %s', request.form['user_name'])
                    flash(f'Error al cambiar de usuario: {error_message}', 'danger')
            except Exception as e:
                logging.error('Error al cambiar de usuario: %s', str(e))
                flash('Error al cambiar de usuario. Inténtalo de nuevo.', 'danger')
        else:
            logging.warning('Inicio de sesión fallido de: %s', request.form['user_name'])
            flash('Credenciales inválidas. Inténtalo de nuevo.', 'danger')

    return render_template('login.html')


@app.route('/logout', methods=['POST'])
def logout():
    # Verificar si el usuario ha iniciado sesión antes de intentar cerrar la sesión
    if 'user_name' in session:
        logging.info('Cierre de sesión de: %s', session['user_name'])
        flash('¡Has cerrado sesión correctamente!', 'success')
    else:
        flash('No has iniciado sesión', 'warning')

    session.clear()
    return redirect(url_for('login'))



@app.route('/home')
def Index():
    # Seleccionamos todo lo referente a los usuarios
    cur = mysql.connection.cursor()
    cur.execute('SELECT u.id, u.user_name, g.group_name, u.updated_at, u.created_at FROM users u JOIN groups g ON u.user_group=g.id')
    users = cur.fetchall()
    cur.close()

    # Seleccionamos los grupos para mostrar
    cur = mysql.connection.cursor()
    cur.execute('SELECT id, group_name FROM groups')
    groups = cur.fetchall()
    cur.close()

    return render_template('index.html', users=users, groups=groups)


@app.route('/add_user', methods=['POST'])
def add_user():
    if request.method == 'POST':
        user_name     = request.form['username']
        user_password = request.form['password']
        user_group    = request.form['level']

        # Obtener el ID del grupo seleccionado
        user_group_id = int(user_group)

        # Obtener el nombre del grupo
        cur = mysql.connection.cursor()
        cur.execute('SELECT group_name FROM groups WHERE id = %s', (user_group_id,))
        group_name = cur.fetchone()[0]
        cur.close()

	# Darle formato al grupo
        if user_group_id == 2:
            format_user_group = 'root'
        else:
            format_user_group = group_name.lower().replace(' ', '-')

        # Crear el nuevo usuario en el sistema
        try:
            subprocess.run(['useradd', '-m', '-p', user_password, '-G', format_user_group, user_name], check=True)
            logging.info('Nuevo usuario "%s" agregado exitosamente', user_name)
            flash('Usuario agregado correctamente')
        except subprocess.CalledProcessError as e:
            logging.error('Error al agregar el usuario: %s', str(e))
            flash('Error al agregar el usuario. Inténtalo de nuevo.', 'danger')

        # Insertar el nuevo usuario en la base de datos
        now = datetime.now(tz)
        created_at = now.strftime("%Y-%m-%d %H:%M:%S")
        
        cur = mysql.connection.cursor()
        cur.execute('INSERT INTO users (user_name, user_password, user_group, created_at) VALUES (%s, %s, %s, %s)', (user_name, user_password, user_group, created_at))
        mysql.connection.commit()
        cur.close()

        return redirect(url_for('Index'))


@app.route('/edit/<id>')
def edit_user(id):
    cur = mysql.connection.cursor()
    cur.execute('SELECT * FROM users WHERE id = %s', (id,))
    data = cur.fetchall()
    cur.close()

    # Seleccionamos los grupos para mostrar
    cur = mysql.connection.cursor()
    cur.execute('SELECT id, group_name FROM groups')
    groups = cur.fetchall()
    cur.close()
    
    return render_template('edit-user.html', user=data[0], groups=groups)


@app.route('/update/<id>', methods=['POST'])
def update_user(id):
    if request.method == 'POST':
        user_name     = request.form['username']
        user_password = request.form['password']
        user_group    = request.form['level']

        # Obtener el ID del grupo seleccionado
        user_group_id = int(user_group)

        # Obtener el nombre del grupo
        cur = mysql.connection.cursor()
        cur.execute('SELECT group_name FROM groups WHERE id = %s', (user_group_id,))
        group_name = cur.fetchone()[0]
        cur.close()

        # Optenemos la contraseña antigua
        cur = mysql.connection.cursor()
        cur.execute('SELECT u.user_name, u.user_password, g.group_name FROM users u WHERE id = %s', (id,))
        old_user = cur.fetchall()
        cur.close()

        # Darle formato al grupo
        format_user_group = 'root' if user_group_id == 2 else group_name.lower().replace(' ', '-')
        
        u = user_name if user_name != old_user[0] else old_user[0]
        p = user_password if user_password != old_user[1] else old_user[1]
        g = user_group if user_group != old_user[2] else old_user[2]

	# actualizar nombre y/o grupo #
        try:
            # Actualizar el nombre del usuario
            subprocess.run(['usermod', '-l', user_name, old_user[0]], check=True)
            
            # Actualizar el grupo del usuario
            subprocess.run(['usermod', '-g', format_user_group, old_user[2]], check=True)
            
            # Actualizar la contraseña del usuario (si es necesario)
            if user_password:
                subprocess.run(['echo', user_password, '|', 'sudo', 'passwd', '--stdin', user_name], shell=True, check=True)
        except subprocess.CalledProcessError as e:
            logging.error('Error al actualizar el usuario: %s', str(e))
            flash('Error al actualizar el usuario. Inténtalo de nuevo.', 'danger')
            return redirect(url_for('Index'))

        # Obtenemos la fecha y hora actual
        now = datetime.now(tz)
        updated_at = now.strftime("%Y-%m-%d %H:%M:%S")
        
        cur = mysql.connection.cursor()
        cur.execute("UPDATE users SET user_name = %s, user_password = %s, user_group = %s, updated_at = %s WHERE id = %s", (user_name, user_password, user_group, updated_at, id))
        mysql.connection.commit()
        cur.close()
        
        logging.info('Usuario "%s" actualizado exitosamente', user_name)
        flash('Usuario editado con exito')
        return redirect(url_for('Index'))
        

@app.route('/delete/<string:id>')
def delete_user(id):
    cur = mysql.connection.cursor()
    cur.execute('DELETE FROM users WHERE id = {0}'.format(id))
    mysql.connection.commit()
    cur.close()
    
    logging.info('El usuario con id "%s" fue eliminado de manera exitosa', id)
    flash('Usuario eliminado')
    return redirect(url_for('Index'))


@app.route('/terminal')
def terminal():
    try:
        # Ejecutar el comando 'neofetch' y capturar su salida
        result = subprocess.run(['neofetch'], capture_output=True, text=True)
        output = result.stdout
        
        # Eliminar los caracteres no deseados al principio y al final del output
        output_cleaned = re.sub(r'^\x1b\[.*?m|\x1b\[0m$', '', output, flags=re.M)
        
        # Convertir los códigos de escape ANSI a HTML
        conv = Ansi2HTMLConverter()
        output_html = conv.convert(output_cleaned)

        return render_template('terminal.html', output=output_html)
    except Exception as e:
        # Manejar cualquier excepción que pueda ocurrir durante la ejecución del comando
        app.logger.error("Error al ejecutar el comando 'neofetch': %s", str(e))
        # Devolver un mensaje de error genérico al usuario
        return "Ocurrió un error al ejecutar el comando 'neofetch'. Por favor, inténtalo de nuevo más tarde."


import subprocess
from flask import jsonify

@app.route('/execute/bash/command', methods=['POST'])
def execute_bash_command():
    # Obtener el comando enviado desde el formulario
    command = request.form.get('fname')

    try:
        # Ejecutar el comando y capturar su salida
        result = subprocess.run([command], shell=True, capture_output=True, text=True)

        # Verificar el código de retorno del proceso
        if result.returncode != 0:
            # Si el código de retorno no es 0, hubo un error
            error = result.stderr.strip()

            # Eliminar los caracteres no deseados al principio y al final del output
            error_cleaned = re.sub(r'^\x1b\[.*?m|\x1b\[0m$', '', error, flags=re.M)
            
            # Convertir los códigos de escape ANSI a HTML
            conv_error = Ansi2HTMLConverter()
            error_html = conv_error.convert(error_cleaned)

            return jsonify({'error': error_html})
        
        # Si el código de retorno es 0, el comando se ejecutó correctamente
        output = result.stdout

        # Eliminar los caracteres no deseados al principio y al final del output
        output_cleaned = re.sub(r'^\x1b\[.*?m|\x1b\[0m$', '', output, flags=re.M)

        # Convertir los códigos de escape ANSI a HTML
        conv = Ansi2HTMLConverter()
        output_html = conv.convert(output_cleaned)

        # Devolver la salida como una respuesta JSON
        return jsonify({'output': output_html})
    except Exception as e:
        # Manejar cualquier excepción que pueda ocurrir durante la ejecución del comando
        app.logger.error("Error al ejecutar el comando en la terminal: %s", str(e))
        # Devolver un mensaje de error como respuesta JSON
        return jsonify({'error': 'Ocurrió un error al ejecutar el comando en la terminal'})


@app.route('/logs')
def logs():
    try:
        with open('app.log', 'r') as f:
            log_content = f.readlines()
            log_content.reverse()
            log_content = '\n'.join(log_content)  # Unir las líneas en una sola cadena
        return render_template('logs.html', log_content=log_content)
    except Exception as e:
        # Registra la excepción en el registro del servidor
        app.logger.error("Error en la vista de logs: %s", str(e))
        # Devuelve un mensaje de error genérico al usuario
        return "Ocurrió un error al cargar los registros. Por favor, inténtalo de nuevo más tarde."


@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404


# Rutas a los archivos de certificado y clave privada
certfile = '/etc/letsencrypt/live/davidloera-flask.info/fullchain.pem'
keyfile = '/etc/letsencrypt/live/davidloera-flask.info/privkey.pem'

# Verificar si los archivos de certificado y clave privada existen
if os.path.exists(certfile) and os.path.exists(keyfile):
    # Crear un contexto SSL y cargar el certificado y la clave privada
    ssl_context = SSLContext()
    ssl_context.load_cert_chain(certfile, keyfile)
else:
    # Si los archivos no existen, imprimir un mensaje de error
    print("No se encontraron los archivos de certificado y clave privada")

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=443, debug=True, ssl_context=ssl_context)
