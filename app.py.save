from ssl import SSLContext
from flask import Flask, render_template, request, redirect, url_for, flash, session, send_file, jsonify
from flask_mysqldb import MySQL
from datetime import datetime
from ansi2html import Ansi2HTMLConverter
import bcrypt
import crypt
import pytz
import logging
import subprocess
import re
import os

app = Flask(__name__)

# Settings
app.secret_key = 'mysecretkey'
tz = pytz.timezone('America/Mexico_City')
pn = re.compile(r'\d')

# Configuración del logger
logging.basicConfig(filename='app.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logging.Formatter.converter = lambda *args: datetime.now(tz).timetuple()

# Obtener los valores de las variables de entorno
mysql_host = os.environ.get('FLASK_MYSQL_HOST')
mysql_user = os.environ.get('FLASK_MYSQL_USER')
mysql_pass = os.environ.get('FLASK_MYSQL_PASS')
mysql_db = os.environ.get('FLASK_MYSQL_DB')

# Utilizar los valores en tu aplicación Flask
app.config['MYSQL_HOST'] = mysql_host
app.config['MYSQL_USER'] = mysql_user
app.config['MYSQL_PASSWORD'] = mysql_pass
app.config['MYSQL_DB'] = mysql_db

mysql = MySQL(app)


def name_format(str):

    # Reemplazar guiones por espacios
    str = str.replace('-', ' ')

    # Quitar caracteres no deseados y convertir a minúsculas
    str = re.sub(r'[^a-zA-Z\s-]', '', str).lower()

    # Reemplazar múltiples espacios por uno solo
    str = re.sub(r'\s+', ' ', str)

    # Reemplazar espacios por guiones y asegurarse de que solo haya uno
    parts = str.split()
    str = '-'.join(parts)

    return str



@app.route('/')
def root():
    return redirect(url_for('login'))

@app.route('/login')
def login():
    return render_template('login.html')

@app.route('/verify_login', methods=['POST'])
def verify_login():
    if request.method == 'POST':
        # Log de solicitud de inicio de sesión
        logging.info('Intento de inicio de sesión de usuario: %s', request.form['user_name'])

        user_name = request.form['user_name']
        root_id   = 1
        # user_password = request.form['user_password']

        cur = mysql.connection.cursor()
        cur.execute('SELECT * FROM users WHERE user_name = %s AND id = %s', (user_name, root_id))
        my_user = cur.fetchone()
        cur.close()

        if my_user:
            # Cambiar de usuario utilizando el comando 'su'
            try:
                result = subprocess.run(['su', user_name], capture_output=True, text=True, input='\n', timeout=5)
                if result.returncode == 0:
                    session['user_name']  = my_user[1]
                    session['user_group'] = my_user[3]
                    logging.info('Inicio de sesión del usuario "%s" completado de manera exitosa', request.form['user_name'])
                    flash('¡Inicio de sesión exitoso!', 'success')
                    return redirect(url_for('Index'))
                else:
                    # Capturar el mensaje de error y mostrarlo
                    error_message = result.stderr.strip()
                    logging.warning('Inicio de sesión fallido de: %s', request.form['user_name'])
                    flash(f'Error al cambiar de usuario: {error_message}', 'danger')
            except Exception as e:
                logging.error('Error al cambiar de usuario: %s', str(e))
                flash('Error al cambiar de usuario. Inténtalo de nuevo.', 'danger')
        else:
            logging.warning('Inicio de sesión fallido de: %s', request.form['user_name'])
            flash('Credenciales inválidas. Inténtalo de nuevo.', 'danger')

    return render_template('login.html')


@app.route('/logout', methods=['POST'])
def logout():
    # Verificar si el usuario ha iniciado sesión antes de intentar cerrar la sesión
    if 'user_name' in session:
        logging.info('Cierre de sesión de: %s', session['user_name'])
        flash('¡Has cerrado sesión correctamente!', 'success')
    else:
        flash('No has iniciado sesión', 'warning')

    session.clear()
    return redirect(url_for('login'))



@app.route('/home')
def Index():
    # Seleccionamos todo lo referente a los usuarios
    cur = mysql.connection.cursor()
    cur.execute('SELECT u.id, u.user_name, g.group_name, u.updated_at, u.created_at FROM users u JOIN groups g ON u.user_group=g.id ORDER BY u.id DESC')
    users = cur.fetchall()
    cur.close()

    # Seleccionamos los grupos para mostrar
    cur = mysql.connection.cursor()
    cur.execute('SELECT id, group_name FROM groups')
    groups = cur.fetchall()
    cur.close()

    return render_template('index.html', users=users, groups=groups)


@app.route('/add_user', methods=['POST'])
def add_user():
    if request.method == 'POST':

        # Obtener los datos del formulario de inicio de sesión
        user_name     = request.form.get('username', '').strip()
        user_password = request.form.get('password', '').strip()
        user_group    = request.form.get('level', '').strip()

        # Verificar que los campos no estén vacíos
        if not user_name or not user_password or not user_group:
            flash('Todos los campos son obligatorios', 'danger')
            return redirect(url_for('Index'))

        # Le damos formato al nombre de usuario
        user_name = name_format(user_name)

        # Validar que la contraseña cumpla con los criterios permitidos
        if not all(char.isalnum() or char in "!@%&*?" for char in user_password):
            flash('La contraseña solo puede contener letras mayúsculas y minúsculas, números, y los siguientes caracteres especiales: !@%&*?', 'danger')
            return redirect(url_for('Index'))

        # Validar que el grupo de usuario sea un valor numérico entre 1 y 4
        if not user_group.isdigit() or not 1 <= int(user_group) <= 4:
            flash('El grupo que ingresaste no exite', 'danger')
            return redirect(url_for('Index'))

        # cifrar contraseña
        encrypted_password = crypt.crypt(user_password)

        # Obtener el ID del grupo seleccionado
        user_group_id = int(user_group)

        # Obtener el nombre del grupo
        cur = mysql.connection.cursor()
        cur.execute('SELECT group_name FROM groups WHERE id = %s', (user_group_id,))
        group_name = cur.fetchone()[0]
        cur.close()

	# Darle formato al grupo
        fg = 'root' if user_group_id == 2 else group_name.lower().replace(' ', '-')

        # Crear el nuevo usuario en el sistema
        try:
            subprocess.run(['useradd', '-m', '-p', encrypted_password, '-G', fg, user_name], check=True)
            subprocess.run(['chsh', '-s', '/bin/bash', user_name])
            logging.info('Nuevo usuario "%s" agregado exitosamente', user_name)
            flash('Usuario agregado correctamente')
        except subprocess.CalledProcessError as e:
            logging.error('Error al agregar el usuario: %s', str(e))
            flash('Error al agregar el usuario. Inténtalo de nuevo.', 'danger')

        # Insertar el nuevo usuario en la base de datos
        now = datetime.now(tz)
        created_at = now.strftime("%Y-%m-%d %H:%M:%S")

        # Generar el hash de la contraseña y el salt
        salt = bcrypt.gensalt()
        hashed_password = bcrypt.hashpw(user_password.encode('utf-8'), salt)

        cur = mysql.connection.cursor()
        cur.execute('INSERT INTO users (user_name, hashed_password, salt, user_group, created_at) VALUES (%s, %s, %s, %s, %s)', (user_name, hashed_password, salt, user_group, created_at))
        mysql.connection.commit()
        cur.close()

        return redirect(url_for('Index'))


@app.route('/edit/<int:id>')
def edit_user(id):
    cur = mysql.connection.cursor()
    cur.execute('SELECT * FROM users WHERE id = %s', (id,))
    data = cur.fetchone()  # Utilizamos fetchone() en lugar de fetchall()
    cur.close()

    if data is None:
        flash('El usuario no existe', 'danger')
        return redirect(url_for('Index'))

    # Seleccionamos los grupos para mostrar
    cur = mysql.connection.cursor()
    cur.execute('SELECT id, group_name FROM groups')
    groups = cur.fetchall()
    cur.close()

    return render_template('edit-user.html', user=data, groups=groups)


@app.route('/update/<id>', methods=['POST'])
def update_user(id):
    if request.method == 'POST':

        # Obtener los datos del formulario de inicio de sesión
        user_name     = request.form.get('username', '').strip()
        user_password = request.form.get('password', '').strip()
        user_group    = request.form.get('level', '').strip()

        # Verificar que los campos no estén vacíos
        if not user_name or not user_group:
            flash('Todos los campos son obligatorios', 'danger')
            return redirect(url_for('edit_user', id=id))

        # Si la contraseña esta vacia, no la actualizamos
        update_pass = False if not user_password else True

        # Le damos formato al nombre de usuario
        user_name = name_format(user_name)

        # Validar que la contraseña cumpla con los criterios permitidos
        if not all(char.isalnum() or char in "!@%&*?" for char in user_password):
            flash('La contraseña solo puede contener letras mayúsculas y minúsculas, números, y los siguientes caracteres especiales: !@%&*?', 'danger')
            return redirect(url_for('edit_user', id=id))

        # Validar que el grupo de usuario sea un valor numérico entre 1 y 4
        if not user_group.isdigit() or not 1 <= int(user_group) <= 4:
            flash('El grupo que ingresaste no exite', 'danger')
            return redirect(url_for('edit_user', id=id))

        # Obtener el ID del grupo seleccionado
        user_group_id = int(user_group)

        # Obtener el nombre del grupo
        cur = mysql.connection.cursor()
        cur.execute('SELECT group_name FROM groups WHERE id = %s', (user_group_id,))
        group_name = cur.fetchone()[0]
        cur.close()

        # Optenemos el usuario anterior
        cur = mysql.connection.cursor()
        cur.execute('SELECT u.user_name, u.hashed_password, u.salt, g.group_name FROM users u JOIN groups g ON u.user_group=g.id WHERE u.id = %s', (id,))
        old_user = cur.fetchone()
        cur.close()

        fg = 'root' if user_group_id == 2 else group_name.lower().replace(' ', '-')
        u = user_name if user_name != old_user[0] else old_user[0]
        p = user_password if update_pass else ''
        fu = u.lower().replace(' ', '-')
        pc = crypt.crypt(p)
        # Preparamos el antiguo nombre del grupo
        old_fg = 'root' if name_format(old_user[3]) == 'administrator-root' else name_format(old_user[3])

        if pn.search(fu): 
            logging.error('Error, los nombres de usuario no pueden contener numeros, usuario "%s" invalido', user_name)
            flash('Error, los nombres de usuario no pueden contener numeros.', 'danger')

            return redirect(url_for('edit_user'))

        print(f"old user_name:  {old_user[0]} || new user_name:  {fu}")
        print(f"old user_pass:  {old_user[1]} || new_user_pass:  {p}")
        print(f"old user_group: {old_fg}      || new_user_group: {fg}")

	# actualizar el usuario
        try:
            # Actualizar el nombre del usuario
            if old_user[0] != fu:
                subprocess.run(['usermod', '-l', fu, old_user[0]], check=True)
                subprocess.run(['mv', '/home/'+old_user[0], '/home/'+fu], check=True)
                subprocess.run(['groupmod', '-n', fu, old_user[0]])
                print("Nombre del usuario y grupo pri")

            # Actualizar el grupo del usuario
            if old_fg != fg:
                subprocess.run(['usermod', '-aG', fg, fu], check=True)
                subprocess.run(['deluser',fu, old_fg], check=True)

            # Actualizar la contraseña del usuario
            if not p:
                # subprocess.run(['echo', f'{fu}:{pc}', '|', 'sudo', 'chpasswd'], check=True, shell=True)
                subprocess.run(['sudo', 'chpasswd'], input=f'{fu}:{pc}', text=True, check=True)

        except subprocess.CalledProcessError as e:
            logging.error('Error al actualizar el usuario: %s', str(e))
            flash('Error al actualizar el usuario. Inténtalo de nuevo.', 'danger')
            return redirect(url_for('Index'))

        # Obtenemos la fecha y hora actual
        now = datetime.now(tz)
        updated_at = now.strftime("%Y-%m-%d %H:%M:%S")

        # Generar el hash de la contraseña y el salt
        salt = bcrypt.gensalt()
        hashed_password = bcrypt.hashpw(user_password.encode('utf-8'), salt)


        cur = mysql.connection.cursor()
        if update_pass:
            cur.execute("UPDATE users SET user_name = %s, hashed_password = %s, salt = %s, user_group = %s, updated_at = %s WHERE id = %s", (fu, hashed_password, salt, user_group, updated_at, id))
        
        else:
            cur.execute("UPDATE users SET user_name = %s, user_group = %s, updated_at = %s WHERE id = %s", (fu, user_group, updated_at, id))

        mysql.connection.commit()
        cur.close()
        
        logging.info('Usuario "%s" actualizado exitosamente', user_name)
        flash('Usuario editado con exito')
        return redirect(url_for('Index'))
        

@app.route('/delete/<string:id>')
def delete_user(id):
    # Obtener el nombre de usuario y el grupo asociado
    cur = mysql.connection.cursor()
    cur.execute('SELECT u.user_name, g.group_name FROM users u JOIN groups g ON u.user_group=g.id WHERE u.id = %s', (id,))
    user_data = cur.fetchone()
    cur.close()

    if user_data:
        user_name = user_data[0]
        user_group = user_data[1]

        # Eliminar al usuario del servidor
        try:
            subprocess.run(['deluser', '--remove-home', user_name], check=True)
            # subprocess.run(['groupdel', user_name], check=True)
            subprocess.run(['rm', '-r', '/home/'+user_name], check=True)
            logging.info('Usuario "%s" eliminado del servidor', user_name)
        except subprocess.CalledProcessError as e:
            logging.error('Error al eliminar al usuario "%s" del servidor: %s', user_name, str(e))

        # Eliminar al usuario de la base de datos
        try:
            cur = mysql.connection.cursor()
            cur.execute('DELETE FROM users WHERE id = %s', (id,))
            mysql.connection.commit()
            cur.close()
            logging.info('Usuario con ID "%s" eliminado de la base de datos', id)
            flash('Usuario eliminado')
        except Exception as e:
            logging.error('Error al eliminar al usuario con ID "%s" de la base de datos: %s', id, str(e))
            flash('Error al eliminar al usuario. Inténtalo de nuevo.', 'danger')
    else:
        flash('El usuario no existe', 'danger')

    return redirect(url_for('Index'))



@app.route('/terminal')
def terminal():
    try:
        # Ejecutar el comando 'neofetch' y capturar su salida
        result = subprocess.run(['neofetch'], capture_output=True, text=True)
        output = result.stdout
        
        # Eliminar los caracteres no deseados al principio y al final del output
        output_cleaned = re.sub(r'^\x1b\[.*?m|\x1b\[0m$', '', output, flags=re.M)
        
        # Convertir los códigos de escape ANSI a HTML
        conv = Ansi2HTMLConverter()
        output_html = conv.convert(output_cleaned)

        return render_template('terminal.html', output=output_html)
    except Exception as e:
        # Manejar cualquier excepción que pueda ocurrir durante la ejecución del comando
        app.logger.error("Error al ejecutar el comando 'neofetch': %s", str(e))
        # Devolver un mensaje de error genérico al usuario
        return "Ocurrió un error al ejecutar el comando 'neofetch'. Por favor, inténtalo de nuevo más tarde."


import subprocess
from flask import jsonify

@app.route('/execute/bash/command', methods=['POST'])
def execute_bash_command():
    # Obtener el comando enviado desde el formulario
    command = request.form.get('fname')

    try:
        # Ejecutar el comando y capturar su salida
        result = subprocess.run([command], shell=True, capture_output=True, text=True)

        # Verificar el código de retorno del proceso
        if result.returncode != 0:
            # Si el código de retorno no es 0, hubo un error
            error = result.stderr.strip()

            # Eliminar los caracteres no deseados al principio y al final del output
            error_cleaned = re.sub(r'^\x1b\[.*?m|\x1b\[0m$', '', error, flags=re.M)
            
            # Convertir los códigos de escape ANSI a HTML
            conv_error = Ansi2HTMLConverter()
            error_html = conv_error.convert(error_cleaned)

            return jsonify({'error': error_html})
        
        # Si el código de retorno es 0, el comando se ejecutó correctamente
        output = result.stdout

        # Eliminar los caracteres no deseados al principio y al final del output
        output_cleaned = re.sub(r'^\x1b\[.*?m|\x1b\[0m$', '', output, flags=re.M)

        # Convertir los códigos de escape ANSI a HTML
        conv = Ansi2HTMLConverter()
        output_html = conv.convert(output_cleaned)

        # Devolver la salida como una respuesta JSON
        return jsonify({'output': output_html})
    except Exception as e:
        # Manejar cualquier excepción que pueda ocurrir durante la ejecución del comando
        app.logger.error("Error al ejecutar el comando en la terminal: %s", str(e))
        # Devolver un mensaje de error como respuesta JSON
        return jsonify({'error': 'Ocurrió un error al ejecutar el comando en la terminal'})


@app.route('/resources')
def resource_usage():
    try:
        # Consultar la base de datos para obtener los datos de rendimiento
        cur = mysql.connection.cursor()
        cur.execute("SELECT timestamp, cpu_usage, memory_usage, disk_usage, network_traffic_in, network_traffic_out FROM server_resources ORDER BY timestamp DESC LIMIT 25")
        data = cur.fetchall()
        cur.close()

        # Preparar los datos para Chart.js
        labels = []
        cpu_usages = []
        memory_usages = []
        disk_usages = []
        network_traffic_ins = []
        network_traffic_outs = []

        for row in reversed(data):
            labels.append(row[0].strftime("%H:%M:%S"))
            cpu_usages.append(row[1])
            memory_usages.append(row[2])
            disk_usages.append(row[3])
            network_traffic_ins.append(row[4])
            network_traffic_outs.append(row[5])

        # Renderizar la plantilla HTML con Chart.js
        return render_template('resources.html', labels=labels, cpu_usages=cpu_usages, memory_usages=memory_usages, disk_usages=disk_usages, network_traffic_ins=network_traffic_ins, network_traffic_outs=network_traffic_outs)
    except Exception as e:
        return str(e)


@app.route('/resources/ajax')
def resource_usage_ajax():
    try:
        # Consultar la base de datos para obtener los datos de rendimiento
        cur = mysql.connection.cursor()
        cur.execute("SELECT timestamp, cpu_usage, memory_usage, disk_usage, network_traffic_in, network_traffic_out FROM server_resources ORDER BY timestamp DESC LIMIT 25")
        data = cur.fetchall()
        cur.close()

        # Preparar los datos para Chart.js
        labels = []
        cpu_usages = []
        memory_usages = []
        disk_usages = []
        network_traffic_ins = []
        network_traffic_outs = []

        for row in reversed(data):
            labels.append(row[0].strftime("%H:%M:%S"))
            cpu_usages.append(row[1])
            memory_usages.append(row[2])
            disk_usages.append(row[3])
            network_traffic_ins.append(row[4])
            network_traffic_outs.append(row[5])

        # Devolver los datos en formato JSON
        return jsonify(labels=labels, cpu_usages=cpu_usages, memory_usages=memory_usages, disk_usages=disk_usages, network_traffic_ins=network_traffic_ins, network_traffic_outs=network_traffic_outs)
    except Exception as e:
        return jsonify(error=str(e)), 500


@app.route('/logs')
def logs():
    try:
        with open('app.log', 'r') as f:
            log_content = f.readlines()
            log_content.reverse()
            log_content = '\n'.join(log_content)  # Unir las líneas en una sola cadena
        return render_template('logs.html', log_content=log_content)
    except Exception as e:
        # Registra la excepción en el registro del servidor
        app.logger.error("Error en la vista de logs: %s", str(e))
        # Devuelve un mensaje de error genérico al usuario
        return "Ocurrió un error al cargar los registros. Por favor, inténtalo de nuevo más tarde."


@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404


# Rutas a los archivos de certificado y clave privada
certfile = '/etc/letsencrypt/live/davidloera-flask.info/fullchain.pem'
keyfile = '/etc/letsencrypt/live/davidloera-flask.info/privkey.pem'

# Verificar si los archivos de certificado y clave privada existen
if os.path.exists(certfile) and os.path.exists(keyfile):
    # Crear un contexto SSL y cargar el certificado y la clave privada
    ssl_context = SSLContext()
    ssl_context.load_cert_chain(certfile, keyfile)
else:
    # Si los archivos no existen, imprimir un mensaje de error
    print("No se encontraron los archivos de certificado y clave privada")

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=443, debug=True, ssl_context=ssl_context)
